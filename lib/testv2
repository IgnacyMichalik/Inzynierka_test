import 'dart:io';

import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:image_picker/image_picker.dart';
import 'package:parse_server_sdk/parse_server_sdk.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  final keyApplicationId = 'uq3mIDo6JrLvcUXVIr8PUU56gTXbMFtqM2kuPPga';
  final keyClientKey = 'jcYVbSnDf2phLSJJV4RYMb3LgU2t84KUb6vOV0Ge';
  final keyParseServerUrl = 'https://parseapi.back4app.com';

  await Parse().initialize(keyApplicationId, keyParseServerUrl,
      clientKey: keyClientKey, debug: true);

  runApp(MaterialApp(
    title: 'Flutter - Storage File',
    debugShowCheckedModeBanner: false,
    home: HomePage(),
  ));
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {


  final Opis = TextEditingController();
  final Kategoria = TextEditingController();

  void doUserLogin() async {
    final Descriptrion = Opis.text.trim();
    final Category = Kategoria.text.trim();
    final pickedFile = image;


    final Dane = ParseObject("Zgloszenie")
      ..set("Opis",Descriptrion)
      ..set("Kategoria",Category)


    ;

    await  Dane.save();


  }
  bool isLoading = false;
  File? image;

  Future pickImage() async {
    try{
      final image = await ImagePicker().pickImage(source: ImageSource.gallery);
      if(image==null)return;
      final imageTemp = File(image.path);

      setState(() => this.image = imageTemp as File?);


    }on PlatformException catch(e){
      print("Nie udało się wybrać zdjęcia: $e");
    }

  }
  Future pickImageC() async {
    try{
      final image = await ImagePicker().pickImage(source: ImageSource.camera);
      if(image==null)return;
      final imageTemp = File(image.path);

      setState(() => this.image = imageTemp as File?);


    }on PlatformException catch(e){
      print("Nie udało się dodać zdjęcia : $e");
    }
  }


  List<String> items = [
    "Drogowe",
    "Pogoda",
    "Niebezpieczny obiekt",
    "Zagospodarowanie terenu",
    "Inne"
  ];
  String? selectedItem = "Drogowe";


  List<ParseObject> results = <ParseObject>[];
  double selectedDistance = 3000;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              SizedBox(
                height: 300,
              ),
              Container(
                height: 50,
                child: new FlutterMap(options: new MapOptions(
                  center: new LatLng(),
                  minZoom: 20.0
                ),
                layers:[
                  new Tir
                ]

                )





                ),
              ),
              SizedBox(
                height: 16,
              ),
              Container(
                height: 50,
                child: Center(

                    child: image != null ? Image.file(image! as File): Text("Nie wybrano jeszcze obrazu ")



                ),
              ),

              SizedBox(
                height: 16,
              ),
              Container(
                  height: 50,

                  child:Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      mainAxisSize: MainAxisSize.max,

                      children:[
                        ElevatedButton(


                            child: Text('Dodaj zdjęcie z galerii'),
                            style: ElevatedButton.styleFrom(primary: Colors.blue,
                            ),
                            onPressed: () {
                              pickImage();
                            }
                        ),
                        ElevatedButton(
                            child: Text('Zrób zdjęcie '),
                            style: ElevatedButton.styleFrom(primary: Colors.blue,),
                            onPressed: () async{
                              pickImageC();

                            }
                        )
                      ])


              ),
              SizedBox(
                height: 16,
              ),
              Container(
                  child: SizedBox(
                      width: 240,
                      height: 50,


                      child:Center(child:
                      DropdownButtonFormField(

                        value: selectedItem,
                        items: items
                            .map((item) => DropdownMenuItem<String>(
                            value: item,
                            child:Center(child:
                            Text(item,textAlign:TextAlign.center, style: TextStyle(fontSize: 20,)),
                            )))
                            .toList(),
                        onChanged:(String? newValue) {
                          Kategoria.text = newValue!;
                              (item) => setState(() => selectedItem = item);},
                      )))),
              SizedBox(
                height: 16,
              ),
              Container(
                height: 50,
                child: (
                    TextFormField(
                      textAlign: TextAlign.center,
                      controller:Opis,
                      decoration: InputDecoration(
                          hintText: "Dodaj opis zgłoszenia"
                      ),
                    )
                ),

              ),
              SizedBox(
                height: 16,
              ),
              Container(
                height: 50,
                child: (
                    ElevatedButton(
                      child: Text('Wyślij zgłoszenie'),
                      style: ElevatedButton.styleFrom(primary: Colors.blue),

                      onPressed: () =>doUserLogin(

                      ),
                    )

                ),

              ),
            ],
          ),
        ));
  }
}






class DisplayPage extends StatefulWidget {
  @override
  _DisplayPageState createState() => _DisplayPageState();
}

class _DisplayPageState extends State<DisplayPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Display Gallery"),
      ),
      body: FutureBuilder<List<ParseObject>>(
          future: getGalleryList(),
          builder: (context, snapshot) {
            switch (snapshot.connectionState) {
              case ConnectionState.none:
              case ConnectionState.waiting:
                return Center(
                  child: Container(
                      width: 100,
                      height: 100,
                      child: CircularProgressIndicator()),
                );
              default:
                if (snapshot.hasError) {
                  return Center(
                    child: Text("Error! Zdjęcie nie zostało dodane!"),
                  );
                } else {
                  return ListView.builder(
                      padding: const EdgeInsets.only(top: 8),
                      itemCount: snapshot.data!.length,
                      itemBuilder: (context, index) {
                        //Web/Mobile/Desktop
                        ParseFileBase? varFile =
                        snapshot.data![index].get<ParseFileBase>('file');

                        //Only iOS/Android/Desktop
                        /*
                        ParseFile? varFile =
                            snapshot.data![index].get<ParseFile>('file');
                        */
                        return Image.network(
                          varFile!.url!,
                          width: 200,
                          height: 200,
                          fit: BoxFit.fitHeight,
                        );
                      });
                }
            }
          }),
    );
  }

  Future<List<ParseObject>> getGalleryList() async {
    QueryBuilder<ParseObject> queryPublisher =
    QueryBuilder<ParseObject>(ParseObject('Gallery'))
      ..orderByAscending('createdAt');
    final ParseResponse apiResponse = await queryPublisher.query();

    if (apiResponse.success && apiResponse.results != null) {
      return apiResponse.results as List<ParseObject>;
    } else {
      return [];
    }
  }
}

class Message {
  static void showSuccess(
      {required BuildContext context,
        required String message,
        VoidCallback? onPressed}) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text("Success!"),
          content: Text(message),
          actions: <Widget>[
            new ElevatedButton(
              child: const Text("OK"),
              onPressed: () {
                Navigator.of(context).pop();
                if (onPressed != null) {
                  onPressed();
                }
              },
            ),
          ],
        );
      },
    );
  }

  static void showError(
      {required BuildContext context,
        required String message,
        VoidCallback? onPressed}) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text("Error!"),
          content: Text(message),
          actions: <Widget>[
            new ElevatedButton(
              child: const Text("OK"),
              onPressed: () {
                Navigator.of(context).pop();
                if (onPressed != null) {
                  onPressed();
                }
              },
            ),
          ],
        );
      },
    );
  }
}
